
Leetcode: https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/

_________________________________________________________________________________________________________________________________

Explanation: Why we are searching for min element in unsorted part ??

arr = [4,5,6,7,0,1,2]

In normal sorted array next element is always greater than the prev element
but 0 is less than 7 hence there is some discrepancy in array i.e [4,5,6,7,0] this is not sorted array
and it is clear that the min element is in this array.

Property of min element is --> it is always less than its prev and next element in the array

______________________________________________________________________________________________________________________________

def search(arr):
    start = 0
    end = len(arr)-1
    N = len(arr)
    
    # Check if array is rotated sorted or simply sorted:
    
    if arr[start] <= arr[end]:  # if this is true then it is a sorted array only return the 1st element.
        return start

    # Now check if middle element is min for not

    while start <= end:
        mid = start + (end-start)//2
        
        next = (mid+1)%N     # since it is rotated
        prev = (mid-1+N)%N

        if arr[mid] <= arr[next] and arr[mid] <= arr[prev]:
            return mid

        # if mid element is not min then look for min in unsorted part of the array:

        elif arr[mid] <=  arr[end]:
            # means right side is sorted search in left half
            end = mid-1
            
        elif arr[mid] >= arr[start]:
            # means left half is sorted look in right for min
            start = mid+1
    return -1

print(search(arr))







----------------------------------------------------------

# To find the pivot

def search(arr):
    """ Will return the idx of the matched element"""
    
    start = 0
    end = len(arr)-1
    
    while start <= end:
        mid = start + (end-start) // 2
        
        if arr[mid] > arr[mid+1]:  # will only be satisified by the smallest element creating the disruptancy 
            return mid+1
        elif arr[mid] > arr[end]: # since our target is the smallest element hence if mid element is greater than end then last element look here
            start = mid+1
        else:
            end = mid # since here mid could also be an option mid < arr[end]
    
    return -1
    
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5
 
 # Alternate Solutiom
 
      def ss(arr,k):
            start = 0
            end = len(arr) -1
            while start <= end:
                mid = start + (end-start) // 2
                if arr[mid] == k:
                    return mid
                if arr[start] <= arr[mid]:
                    if k >= arr[start] and k <= arr[mid]:
                        end = mid -1
                    else:
                        start = mid +1
                else:
                    if k >= arr[mid] and k <= arr[end]:
                        start = mid +1
                    else:
                        end = mid - 1
            return -1
        x = ss(nums,target)
        return x
