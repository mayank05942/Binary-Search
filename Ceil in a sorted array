Given a sorted array and a value x, the ceiling of x is the smallest element in array greater than or equal to x,
and the floor is the greatest element smaller than or equal to x. Assume than the array is sorted in non-decreasing order. 
Write efficient functions to find floor and ceiling of x.

Examples :

For example, let the input array be {1, 2, 8, 10, 10, 12, 19}
For x = 0:    floor doesn't exist in array,  ceil  = 1
For x = 1:    floor  = 1,  ceil  = 1
For x = 5:    floor  = 2,  ceil  = 8
For x = 20:   floor  = 19,  ceil doesn't exist in array
_____________________________________________________________________________________________________________________________

Leetcode: https://leetcode.com/problems/search-insert-position/

________________________________________________________________________________________________________________________________

Code:

def search(arr,k):
    start = 0
    end = len(arr)-1
    if k < arr[0]:
        return arr[0]
    if k > arr[-1]:
        return "Ceil does not exist"
    temp = 0
    while start <= end:
        mid = start + (end-start)//2
        if arr[mid] == k:
            return arr[mid]
        elif arr[mid] < k:
            #look in right half for bigger elements
            start = mid+1
        elif arr[mid] > k:
            # if mid is greater than k then it is a possible candidate
            temp = arr[mid]
            # but we have to look for min hence look in the left half
            end = mid-1
    return temp

print(search(arr,k))
______________________________________________________________________________________________________________________________________
