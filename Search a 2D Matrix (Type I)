Leetcode: https://leetcode.com/problems/search-a-2d-matrix/
_________________________________________________________________

When only Rows are sorted.
https://www.youtube.com/watch?v=FOa55B9Ikfg

________________________________________________________________
Code:

Method 1 : When we apply binary search for each row: O(n * log(m))  -> Not optimum
---------

class Solution:
    def searchMatrix(self, arr: List[List[int]], k: int) -> bool:
        def search(arr,k):
            start = 0
            end = len(arr)-1
            while start <= end:
                mid = (start+end)//2
                if arr[mid] == k:
                    return mid
                elif arr[mid] > k:
                    end = mid-1
                else:
                    start = mid+1
            return -1
        lis = []
        for items in arr:
            x = search(items,k)
            lis.append(x)
        for items in lis:
            if items != -1:
                return True
        return False
        
Method 2:  Consider the matrix as 1D array with elements from index 0 to index (mn) and the index mapping will be as follows: row = element // total_col
            and col = element % total_col
----------
TC : O(log(m*n))

class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        
        if not matrix:
            return False
            
        m = len(matrix)
        n = len(matrix[0])
        
        def search(arr,k):
            
            start = 0
            end = (m*n)-1
            
            while start <= end:
                mid = start + (end-start)//2
                
                temp = arr[mid//n][mid%n]
                
                if temp == k:
                    return True
                elif temp > k:
                    end = mid-1
                else:
                    start = mid+1
                
            return False
        return search(matrix,target)
